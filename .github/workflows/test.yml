name: 'build-test'
on: # rebuild any PRs and main branch changes
  pull_request:
  push:
    branches:
      - main
      - 'releases/*'
env:
  OSS_ACCESS_KEY_ID: ${{ secrets.OSS_ACCESS_KEY_ID }}
  OSS_ACCESS_KEY_SECRET: ${{ secrets.OSS_ACCESS_KEY_SECRET }}

jobs:
  build: # make sure build/ci work properly
    name: 'Build and test this repo'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: |
          npm install
      - run: |
          npm run all

  cancel_previous:
    name: Cancel previous runs
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'
    steps:
      - name: Cancel previous runs of outdated commit
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}
          all_but_latest: true

  mirror-tools: # make sure the action works on a clean machine without building
    name: 'Mirror tools to OSS'
    runs-on: ubuntu-latest
    if: ${{ env.OSS_ACCESS_KEY_ID }}
    steps:
      - uses: actions/checkout@v2
      - uses: ./
        name: Mirror tools
        with:
          action: mirror-tools

  test-build-oneflow: # make sure the action works on a clean machine without building
    name: 'Build OneFlow with Conda and Docker'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        os: [['self-hosted', 'linux', 'provision'], [ubuntu-latest]]
        oneflow-build-env: ['conda', 'manylinux']
    env:
      ONEFLOW_SRC: oneflow-src-${{ matrix.os.oneflow-build-env }}
    steps:
      - name: Fix permissions
        if: ${{ contains(matrix.os, 'self-hosted') }}
        run: |
          docker run --rm -v $PWD:/p -w /p busybox chmod -R o+w .
      - uses: actions/checkout@v2
      - name: Checkout Oneflow-Inc/oneflow
        uses: actions/checkout@v2
        with:
          repository: Oneflow-Inc/oneflow
          ref: refine_for_new_ci
          path: ${{ env.ONEFLOW_SRC }}
      - name: Checkout Oneflow-Inc/conda-env
        uses: actions/checkout@v2
        with:
          repository: Oneflow-Inc/conda-env
          ref: 9cd37571cbd6cc6a81fc87faa7f6a43be772ae31
          path: conda-env
      - uses: ./
        name: Test conda on hosted
        if: ${{ contains(matrix.os, 'ubuntu-latest') }} && ${{ matrix.os.oneflow-build-env == 'conda'}}
        with:
          cmake-init-cache: ${{ env.ONEFLOW_SRC }}/cmake/caches/cn/fast/cpu-clang.cmake
          oneflow-src: ${{ env.ONEFLOW_SRC }}
          oneflow-build-env: conda
          conda-env-file: conda-env/dev/clang10/environment-v2.yml
      - uses: ./
        name: Test conda on self-hosted
        if: ${{ contains(matrix.os, 'self-hosted') }} && ${{ matrix.os.oneflow-build-env == 'conda'}}
        with:
          cmake-init-cache: ${{ env.ONEFLOW_SRC }}/cmake/caches/cn/fast/cpu-clang.cmake
          oneflow-src: ${{ env.ONEFLOW_SRC }}
          oneflow-build-env: conda
          conda-env-file: conda-env/dev/clang10/environment-v2.yml
          conda-installer-url: https://oneflow-static.oss-cn-beijing.aliyuncs.com/downloads/conda-installers/Miniconda3-py39_4.10.3-Linux-x86_64.sh
          conda-prefix: ~/miniconda3-prefixes/py39_4.10.3
          self-hosted: ${{ contains(matrix.os, 'self-hosted') }}
      - uses: ./
        name: Test manylinux
        if: ${{ matrix.os.oneflow-build-env == 'manylinux'}}
        with:
          cmake-init-cache: ${{ env.ONEFLOW_SRC }}/cmake/caches/ci/cuda-75.cmake
          oneflow-src: ${{ env.ONEFLOW_SRC }}
          oneflow-build-env: manylinux
          wheelhouse-dir: manylinux-wheelhouse
          self-hosted: ${{ contains(matrix.os, 'self-hosted') }}
          python-versions: |
            - 3.6
            - 3.7
            - 3.8
